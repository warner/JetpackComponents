
with dash:

There is an imaginary program which stitches all of these components
together. If written in python, it would look like this:

def make_extension(chrome, host="twitter.com", password_slotname="twitter"):
  x = XHR(chrome, restrict_to=host)
  pw = PasswordSlotAccess(chrome, password_slotname)
  t1 = TwitterAPI(x, pw)
  t2 = ReadOnlyTwitterAPI(t1)
  s = StatusBarIconMaker(chrome)
  d = Driver(t2, s)
  d.run()

That makes it pretty clear how the pieces need to be wired up. But this is
too flexible, and must be given full chrome authority, and it isn't clear
where it ought to live. If it lives in the top-level addon bundle, along with
the Driver code, then it looks a lot like giving chrome access to the addon
as a whole (which, while technically accurate, isn't what we're going for:
the addon ought to only be getting ReadOnlyTwitterAPI and
StatusBarIconMaker).

So we could instead express this imaginary program in the various
manifest.json files that serve as headers for the different components. And
we handle the parameterization by passing in a PowerBox request marker. When
the loader assembles all the components together, it makes a list of all the
markers and uses that to construct the install-time configuration dialog.

RestrictedXHR:
 provides: XHR
 depends_on: chrome
 args: restrict_to=PowerBoxRequest(DOMAIN, "Allow XHR access to which site?")

PasswordSlotAccess:
 provides: PasswordSlotAccess
 depends_on: chrome
 args: slotname=PowerBoxRequest(PASSWORD, "Which password to use?")

TwitterAPI:
 provides: TwitterAPI
 depends_on: RestrictedXHR, PasswordSlotAccess

ReadOnlyTwitterAPI:
 provides: ReadOnlyTwitterAPI
 depends_on: TwitterAPI

StatusBarIconMaker:
 provides: StatusBarIconMaker
 depends_on: chrome

Driver:
 depends_on: ReadOnlyTwitterAPI, StatusBarIconMaker

The loader would spot the two PowerBoxRequest markers and ask the user for a
DOMAIN and PASSWORD(name) when installing.

Note that none of the higher components are aware of the lower components'
authority requirements: they don't even see the PowerBoxRequest markers. This
allows the Driver to clearly depend only upon the appropriate APIs (and any
object which actually provide these APIs are assumed to be constructed with
sufficient authorities to do their job).

OTOH, we'd really like the install-time dialog to at least explain what these
DOMAIN/PASSWORD are used for, and probably suggest a default. Maybe something
vaguely like:

TwitterAPI:
 provides: TwitterAPI
 depends_on: RestrictedXHR(desc="Which twitter-like site shall I access?",
                           default="twitter.com"), PasswordSlotAccess

RestrictedXHR(desc,default):
 desc = "Allow XHR access to which site?" + desc
 provides: XHR
 depends_on: chrome
 args: restrict_to=PowerBoxRequest(DOMAIN, desc, default)

dash recommends: A Ban On Imports, from the Newspeak (proglang) site
 conflating interface with implementation
 like when you do:
  try: import json
  except ImportError: import simplejson as json
 and really wanted to do "import ISimpleJSON as json" and let the loader
 figure out which implementation is available

 also Scheme48 modules


With Dean Tribble:

The "assembly program" should be a thing in its own right, not just a
byproduct of the dependency graph. This is more obvious when you consider
duplicate components: an add-on which has a piece that wants XHR to twitter
and a different piece that wants XHR to blogspot will need two separate XHR
instances, configured with different user-sourced restrictions. It's also
more clear when you consider that it's the LimitedXHR which needs the
restriction, but it's some component above it which knows what that
particular LXHR is going to be used for, and can therefore provide a clear
prompt for the user.

The assembly program shouldn't be written in javascript, but it could compile
down to that. It should probably be expressed in some sort of XML/JSON
expression tree, as a graph of instantiated components and
questions/powerboxes that involve the user. The phrasing of the user config
questions should go here.

How is this assembly language ("blueprint"? "bill-of-materials"?) safer than
writing a JS program and giving it full chrome access? First answer is
typechecking: by only wiring up objects with compatible APIs, we can't
accidentally give chrome access to anything but the low-level components that
declared a need for it. Second is limited domain: no loops, no conditionals.

This language should probably be represented (at least visualized, if not
constructed from) a picture: component nodes in a graph.

Some of the nodes are "ask the user to pick a thing X, with prompt Y, default
Z, and constraints ABC". The assembly-reviewer is responsible for making sure
the questions are accurate and useful, and that the defaults match the
expectations of someone reading the add-on description.

The presence of an assembly language creates a distinction between the add-on
as a whole, and the top-level component. This has implications for composing
add-ons. A useful example might be an add-on which manages the user's blog
(an object which has an API to post or edit new items), and a bunch of other
add-ons which can usefully talk to this blog object to do things. The user
needs to first define a "blog", then other add-ons can be declared to need a
connection to this object.
